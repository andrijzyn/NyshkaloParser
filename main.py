import os
import requests
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
from selenium import webdriver
from openpyxl import Workbook
from openpyxl.drawing.image import Image
import re

class AdParser:
    def __init__(self, min_price, max_price, geckodriver_path, banned_keywords, image_folder="images"):
        self.options = Options()
        self.options.add_argument("--headless")
        self.service = Service(geckodriver_path)
        self.driver = webdriver.Firefox(service=self.service, options=self.options)
        
        self.image_folder = image_folder
        os.makedirs(self.image_folder, exist_ok=True)
        
        self.seen_links = set()
        self.min_price = min_price
        self.max_price = max_price
        self.banned_keywords = banned_keywords
        self.block_ads_script = """
            var adSelectors = [
                'iframe[src*="amazon-adsystem.com"]',
                'iframe[src*="googlesyndication.com"]',
                'iframe[src*="googletagmanager.com"]',
                'iframe[src*="midas-network.com"]',
                'iframe[src*="privacy-center.org"]',
                'img[src*="defractal.com"]',
                'div[class*="ad"]',
                'script[src*="dotmetrics.net"]'
            ];

            adSelectors.forEach(function(selector) {
                var ads = document.querySelectorAll(selector);
                ads.forEach(function(ad) {
                    ad.remove();
                });
            });
        """
    
    def start_driver(self):
        """–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏"""
        self.driver.get("https://www.njuskalo.hr")
        self.driver.execute_script(self.block_ads_script)

    def get_element_text(self, ad, by, value):
        try:
            return ad.find_element(by, value).text.strip()
        except:
            return None

    def get_element_attr(self, ad, by, value, attr):
        try:
            return ad.find_element(by, value).get_attribute(attr)
        except:
            return None

    def download_image(self, url, title):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        try:
            safe_title = "".join(c if c.isalnum() or c in " _-" else "_" for c in title)[:50]
            filename = os.path.join(self.image_folder, f"{safe_title}.jpg")
            img_data = requests.get(url, timeout=5).content
            with open(filename, "wb") as img_file:
                img_file.write(img_data)
            return filename
        except Exception as e:
            print(f"Failed to download image {url}: {e}")
            return None

    def is_advertisement(self, title):
        """
        –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–∏–º
        :param title: –ù–∞–∑–≤–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
        :return: True, —è–∫—â–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–µ, False –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É
        """
        title = title.upper()  # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ –≤–µ–ª–∏–∫–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        for keyword in self.banned_keywords:
            if re.search(r'\b' + re.escape(keyword) + r'\b', title):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                return True
        return False

    def parse_listings(self):
        ads = self.driver.find_elements(By.CLASS_NAME, "EntityList-item")
        listings = []
        ad_counter = 0  # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å

        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ, –ø—Ä–∏–ø–∏–Ω—è—î–º–æ –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö
        if not ads:
            return listings, ad_counter

        for ad in ads:
            title = self.get_element_text(ad, By.CLASS_NAME, "entity-title")
            price = self.get_element_text(ad, By.CLASS_NAME, "price")
            link = self.get_element_attr(ad, By.TAG_NAME, "a", "href")
            img_url = self.get_element_attr(ad, By.TAG_NAME, "img", "src")

            if not title or not link or link in self.seen_links or self.is_advertisement(title):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
                continue

            self.seen_links.add(link)
            img_filename = self.download_image(img_url, title) if img_url else None

            listings.append({
                "title": title,
                "price": price,
                "link": link,
                "image": img_filename
            })

            ad_counter += 1  # –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É, –∫–æ–ª–∏ –¥–æ–¥–∞—î—Ç—å—Å—è –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è

        return listings, ad_counter

    def collect_data(self, pages=10):
        all_data = []
        total_ads = 0  # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å

        for page in range(1, pages + 1):
            url = f"https://www.njuskalo.hr/iznajmljivanje-stanova?geo[locationIds]=1248%2C1249%2C1250%2C1251%2C1252%2C1253&price[max]={self.max_price}&page={page}"
            self.driver.get(url)

            data, ad_count = self.parse_listings()

            if not data:
                print(f"üö´ No listings found on page {page}. Moving to the next page.")
                continue  # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è

            all_data.extend(data)
            total_ads += ad_count  # –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å

            print(f"‚úÖ Data collected from page {page}")

        return all_data, total_ads

    def save_to_excel(self, data, excel_file="njuskalo_listings.xlsx"):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É Excel"""
        wb = Workbook()
        wb.remove(wb.active)  # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∞—Ä–∫—É—à

        for item in data:
            title = item["title"][:30]  # –ù–∞–∑–≤–∞ –∞—Ä–∫—É—à–∞ –º–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ –¥–æ–≤–∂–∏–Ω—ñ
            sheet_name = "".join(c if c.isalnum() or c in " _-" else "_" for c in title)

            ws = wb.create_sheet(title=sheet_name)
            ws.append(["Title", item["title"]])
            ws.append(["Price", item["price"]])
            ws.append(["Link", item["link"]])

            # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ
            if item["image"] and os.path.exists(item["image"]):
                img = Image(item["image"])
                img.width, img.height = 200, 200  # –ú–∞—Å—à—Ç–∞–± —Ñ–æ—Ç–æ
                ws.add_image(img, "A5")  # –í—Å—Ç–∞–≤–ª—è—î–º–æ –≤ –∫–æ–º—ñ—Ä–∫—É A5

        wb.save(excel_file)
        print(f"‚úÖ Data saved in {excel_file} with individual sheets")

    def close_driver(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.driver.quit()


if __name__ == "__main__":
    min_price = 300
    max_price = 400
    geckodriver_path = "/usr/bin/geckodriver"
    banned_keywords = [
        # –¢–µ—Ö–Ω—ñ–∫–∞ —Ç–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞  
        "MOTOROLA", "SAMSUNG", "IPHONE", "XIAOMI", "PS4", "PS5", "XBOX", "TV", "LAPTOP", "PC", "COMPUTER",  
        "TABLET", "MONITOR", "HEADPHONES", "AUDIO", "GADGET", "CAMERA", "DRONE", "SMARTWATCH", "PRINTER",  

        # –ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ —Ç–∞ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏  
        "TDI", "GOLF", "BMW", "AUDI", "MERCEDES", "FORD", "OPEL", "VOLKSWAGEN", "≈†KODA", "CAR", "VEHICLE",  
        "MOTOR", "ENGINE", "TURBO", "TRANSMISSION", "RIMS", "TIRES", "WHEELS", "OIL", "FUEL", "SUZUKI",
        "YAMAHA", "HONDA",

        # –ü–æ–±—É—Ç–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏  
        "FURNITURE", "COUCH", "SOFA", "TABLE", "CHAIR", "WARDROBE", "BED", "MATTRESS", "KITCHEN",  
        "WASHING MACHINE", "FRIDGE", "MICROWAVE", "STOVE", "OVEN", "DISHWASHER",  

        # –ú–æ–±—ñ–ª—å–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏  
        "PREPAID", "SIM CARD", "MOBILE PLAN", "INTERNET", "SUBSCRIPTION", "SERVICE", "PACKAGE",  

        # –ó–Ω–∏–∂–∫–∏, –∞–∫—Ü—ñ—ó, –ø—Ä–æ–º–æ  
        "RATE", "NEO", "256GB", "NOVO", "NEW", "SALE", "DISCOUNT", "PROMO", "OFFER", "BLACK FRIDAY",  
        "CYBER MONDAY", "CLEARANCE", "SPECIAL PRICE", "ACTION", "BUNDLE", "FREE SHIPPING",  

        # –í–∞–ª—é—Ç–∞, –≥—Ä–æ—à—ñ, –∫—Ä–µ–¥–∏—Ç  
        "EURO", "DOLLAR", "KUNA", "CREDIT", "LOAN", "FINANCE", "MONEY", "PAYMENT", "INSTALLMENT",  

        # –Ü–Ω—à—ñ –Ω–µ—Ü—ñ–ª—å–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó  
        "MATRIX", "TICKET", "CONCERT", "EVENT", "VOUCHER", "GIFT CARD", "TOY", "BIKE", "SCOOTER",  
        "ELECTRIC SCOOTER", "GYM MEMBERSHIP", "TRAVEL", "VACATION", "HOTEL", "RESORT", "TENT", "CAMPING",
        "RALPH", "LAUREN", "PROROK"
    ]

    parser = AdParser(min_price, max_price, geckodriver_path, banned_keywords)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –ø–∞—Ä—Å–∏–Ω–≥—É
    parser.start_driver()
    all_data, total_ads = parser.collect_data(pages=5)

    print(f"‚úÖ Total ads collected: {total_ads}")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ Excel
    parser.save_to_excel(all_data)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä
    parser.close_driver()
